# -*- coding: utf-8 -*-
"""CS279 Project Final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L5oQHEFki1iNwu0nUHaRxbMYgA1bC1-I
"""

#from google.colab import drive
#drive.mount('/content/drive')

import cv2
import numpy as np
#!pip install imageio
import imageio as imageio
import matplotlib.pyplot as plt
#!pip install cvlib
import cvlib as cv
from cvlib.object_detection import draw_bbox
from numpy.lib.polynomial import poly
from PIL import Image
from scipy import ndimage
import skimage.io as skio
from google.colab.patches import cv2_imshow

path = './cell0.tif'

"""USING OPEN CV"""

imstack1 = skio.imread(path, plugin="tifffile")
plt.figure(figsize=(10,10))
plt.axis('off')
plt.imshow(imstack1)
plt.show() #image

red, green, blue = cv2.split(imstack1)
cv2_imshow(red)
cv2_imshow(green)
cv2_imshow(blue)

ret, thresh1 = cv2.threshold(red, 80, 300, cv2.THRESH_BINARY)
cv2_imshow(thresh1)

median = cv2.medianBlur(thresh1, 11)
cv2_imshow(median)

blur = cv2.GaussianBlur(median, (11, 11), 0)
plt.imshow(median, cmap='gray')

canny = cv2.Canny(blur, 30, 150, 3)
plt.imshow(canny, cmap='gray')

dilated = cv2.dilate(canny, (1, 1), iterations=0)
plt.imshow(dilated, cmap='gray')

(cnt, hierarchy) = cv2.findContours(
    dilated.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
rgb = cv2.cvtColor(dilated, cv2.COLOR_BGR2RGB)

cnt = [x for x in cnt if cv2.contourArea(x) >= 5]
big = [x for x in cnt if cv2.contourArea(x) >= 300]

cv2.drawContours(rgb, cnt, -1, (0, 255, 0), 2)
 
plt.imshow(rgb)

print(len(big))
print("cells in the image : ", len(cnt) + len(big))

cv2.fillPoly(red, pts = cnt, color=(255,0,0))
stencil = np.zeros(red.shape).astype(red.dtype)
final = cv2.fillPoly(stencil, pts = cnt, color=(255,0,0))
final1 = cv2.fillPoly(final, pts = cnt, color=(255,0,0))
plt.imshow(final1)

'''
img = red
cv2_imshow(img)
# Set our filtering parameters
# Initialize parameter setting using cv2.SimpleBlobDetector
params = cv2.SimpleBlobDetector_Params()

# Change thresholds
params.minThreshold = 200
#params.maxThreshold = 1

# Set Area filtering parameters
params.filterByArea = True
params.minArea = 1

# Set Circularity filtering parameters
params.filterByCircularity = False
params.minCircularity = 0.5

# Set Convexity filtering parameters
params.filterByConvexity = False
params.minConvexity = 0.2
	
# Set inertia filtering parameters
params.filterByInertia = False
params.minInertiaRatio = 0.01

# Create a detector with the parameters
detector = cv2.SimpleBlobDetector_create(params)
	
# Detect blobs
keypoints = detector.detect(img)

# Draw blobs on our image as red circles
blank = np.zeros((1, 1))
blobs = cv2.drawKeypoints(img, keypoints, blank, (0, 0, 255),
						cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)

number_of_blobs = len(keypoints)
text = "Number of Circular Blobs: " + str(len(keypoints))
print(text)
cv2.putText(blobs, text, (20, 550),
			cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 100, 255), 2)

# Show blobs
cv2_imshow(blobs)
cv2.waitKey(0)
cv2.destroyAllWindows()
'''